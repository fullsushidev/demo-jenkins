#!groovy
node {
    def qmstrbin = "${env.WORKSPACE}/bin"
    def qmstraddress = ""
    def qmstrcachedir = "$HOME/workspace/QMSTR/qmstrcache"

    try{

        parameters {
        }

        stage('clean')
        {
            cleanWs(deleteDirs: true,
                patterns: [
                    [pattern: 'qmstrcache', type: 'EXCLUDE'],
                    [pattern: 'qmstrcache/**', type: 'EXCLUDE'],
                    [pattern: '.git', type: 'EXCLUDE'],
                    [pattern: '.git/**', type: 'EXCLUDE']
            ])
            sh "ls -laR"
        }
        stage('Clone sources') {
            dir('qmstr-master') {
                checkout([$class: 'GitSCM',
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    branches: [[name: "${params.qmstrbranch}"]],
                    userRemoteConfigs: [[url: "https://github.com/${params.qmstrrepo}/qmstr.git"]]])
                sh "git clean -fxd"
                sh "mkdir documentation"
            }
            dir("web"){
                git poll: false, url: 'https://github.com/senaingrid/test-web'
            }
        }
        stage('Generating qmstr doc') {
            withEnv(["ENV1=${reftovarstring}"])
            {
                    sh "make doc"
            }
        }
        stage('Archive artifact')
        {
            archiveArtifacts 'qmstr/qmstr-documentation-build/qmstr-doc.tar.bz2'
        }
        stage('Publish report to website') {
            if (currentBuild.getPreviousBuild().result != 'SUCCESS') {
                sh """ curl -XPOST -d '{"msgtype":"m.text", "body":"Job ${env.JOB_NAME} ${env.BUILD_NUMBER} successfully finished. see results at ${env.BUILD_URL}"}' ${matrix_url} -k """
            }
            build job: '/QMSTR-intern/web-publisher', parameters: [string(name: 'project', value: 'docs')], propagate: false
        }

    }
    catch (Exception e)
    {
        currentBuild.result = 'FAILURE'
        if (currentBuild.getPreviousBuild().result != 'FAILURE') {
            sh """ curl -XPOST -d '{"msgtype":"m.text", "body":"!!! Job ${env.JOB_NAME} ${env.BUILD_NUMBER} Failed with exception: ${e}. see error at ${env.BUILD_URL}"}' ${matrix_url} -k """
        }

        if (fileExists(qmstrbin + 'qmstrctl')) {
            withEnv(["PATH=${qmstrbin}:${env.PATH}", "QMSTR_MASTER=${qmstraddress}"]) {
                sh "qmstrctl logs"
                sh "qmstrctl quit"
            }
        }
    }
}
