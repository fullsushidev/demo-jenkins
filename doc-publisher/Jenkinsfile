#!groovy
node {
    def qmstrbin = "${env.WORKSPACE}/bin"
    def qmstraddress = ""
    def qmstrcachedir = "$HOME/workspace/QMSTR/qmstrcache"

    try{

        parameters {
            string(name: 'qmstrrepo', defaultValue: 'QMSTR', description: 'Repo to use QMSTR, endocode or senaingrid')
            string(name: 'qmstrbranch', defaultValue: 'master', description: 'Branch of qmstr repo to build')
        }

        stage('clean')
        {
            cleanWs(deleteDirs: true,
                patterns: [
                    [pattern: 'qmstrcache', type: 'EXCLUDE'],
                    [pattern: 'qmstrcache/**', type: 'EXCLUDE'],
                    [pattern: '.git', type: 'EXCLUDE'],
                    [pattern: '.git/**', type: 'EXCLUDE']
            ])
            sh "ls -laR"
        }
        stage('Clone sources') {
            dir('qmstr') {
                checkout([$class: 'GitSCM',
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [],
                    submoduleCfg: [],
                    branches: [[name: "${params.qmstrbranch}"]],
                    userRemoteConfigs: [[url: "https://github.com/${params.qmstrrepo}/qmstr.git"]]])
                sh "git clean -fxd"
            }
        }
        stage('Generating qmstr docs website statics file') {
            sh 'make docs'
        }
        stage('Archive artifact')
        {
            archiveArtifacts 'qmstr/doc/qmstr-doc.tar.bz2'
        }
        stage('Publish report to website') {
            // build job: '/QMSTR-intern/web-publisher', parameters: [string(name: 'project', value: 'docs')], propagate: false
            build job: '/QMSTR-intern/WIP-ingrid_builddoc-test', parameters: [string(name: 'project', value: 'docs')], propagate: false
        }

    }
    catch (Exception e)
    {
        currentBuild.result = 'FAILURE'
        }
    }
}
